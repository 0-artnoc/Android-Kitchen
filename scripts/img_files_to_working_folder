#
# This script has two optional arguments:
#
# $1 = "no_create" or "create" or "create_working 
#         - must specify no_create if working folder already exists
# $2 = "kernel_only" or "name_given" - if this is specified then $1 is mandatory
#

if [ "$1" == "no_create" ] 
then
  build_dir=`ls | grep -m 1 WORKING_`

  mkdir $build_dir/system
  mv $build_dir/system.img $build_dir/system

else

  current_dir=`pwd`
  dest_dir=$current_dir/original_update
  scripts/check_no_bootimg $dest_dir


  #
  # Check for system.img and boot.img in original_update  
  #
  if [ -e original_update/system.img ]
  then
    echo Found original_update/system.img
    if [ -e original_update/boot.img ]
    then
      echo Found original_update/boot.img
    else
      echo "Error: No original_update/boot.img found"
      echo
      exit 1
    fi
  else

    if [ -e original_update/boot.img ]
    then
      echo "Found original_update/boot.img"
      echo "Error: No original_update/system.img found"
    else
      echo
      echo "Error: No ROMs found under original_update folder!"
    fi

    exit 1
  fi


  #
  # Working folder name
  #
  build_dir=`scripts/set_working_folder_name $2`

  echo
  echo "Creating working folder $build_dir ..."
  mkdir $build_dir
  mkdir $build_dir/system

  echo Copying boot.img and system.img ...
  cp original_update/boot.img $build_dir
  cp original_update/system.img $build_dir/system

fi


#
# Directory tree
#
mkdir -p $build_dir/META-INF/com/google/android
echo
echo "Adding an update-script ..."
cp tools/update_files/update-script $build_dir/META-INF/com/google/android/


#
# Check for location of Android header in boot.img so that it can be
# added to working folder correctly
#
scripts/check_bootimg_header


#
# Check for YAFFS/EXT*
#

system_dir=$build_dir/system

scripts/check_if_img_yaffs $system_dir system.img

is_yaffs=$?

if [ "$is_yaffs" == "1" ]
then

  if [ `uname | grep CYGWIN` ]
  then
    unyaffs_file=unyaffs.exe
  else
    unyaffs_file=unyaffs
  fi
    
  scripts/compile_unyaffs
  if [ "$?" == "1" ]
  then
    exit 0
  fi

  echo
  echo Extracting contents of system.img ...
  cd $system_dir
  result=`../../tools/unyaffs_files/$unyaffs_file system.img 2>/dev/null`

else

  echo
  echo "NON-YAFFS FILE FORMAT DETECTED IN ROM"
  echo

  cd $system_dir

  # Get full path
  system_dir=`pwd`

  cd ../..
  scripts/extract_ext3_img $system_dir system.img
  cd $system_dir

fi


check_dump=`ls unyaffs*stackdump* 2>/dev/null`
rm -f system.img 2>/dev/null

if [ "$?" == "1" ]
then
  echo
  echo "WARNING: system.img is in use.  Remove file manually after application is closed."
  echo
fi


cd ..

if [ "$check_dump" != "" ]
then
  echo
  echo "Error: Stackdump file found under /system folder due to incompatibility"
  echo "       with unyaffs."
  exit 1
fi

if [ ! -d system ]
then
  echo
  echo "Error:  No /system folder found!"
  exit 1
fi

if [ ! -d system/framework ]
then
  echo
  echo "Error: No /system/framework folder found!"
  exit 1
fi

if [ ! -d system/app ]
then
  echo
  echo "Error: No /system/app folder found!"
  exit 1
fi

if [ "`ls system`" == "" ]
then
  echo 
  echo "Error: /system folder is empty!"
  echo
  exit 1
fi

cd ..


# Wi-fi fix - required for some Huawei devices
scripts/fix_huawei_wifi


if [ "$2" != "kernel_only" ] && [ "$2" != "name_given" ]
then
  scripts/fix_update_script 

  # Modify the update-script with features found in Nandroid backup
  scripts/fix_update_script_with_features

  scripts/remove_recovery
fi

echo Listing of $build_dir:
echo
ls -l $build_dir

echo
echo "Finished setting up working folder!"

